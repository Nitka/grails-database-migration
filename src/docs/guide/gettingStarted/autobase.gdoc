Autobase is another plugin for managing database migrations. It uses Groovy migration scripts that have a similar syntax to this plugin's ones, but there are some differences that mean you will have to do a little bit of work to migrate your existing scripts. The following notes are applicable to Autobase 0.11 and earlier.

h4. Location of migration scripts

Autobase defaulted to putting its migration scripts into a @./migrations@ directory, whereas the Database Migration plugin uses @./grails-app/migrations@ as the default. So, you can either move your scripts or add this setting to your @grails-app/conf/Config.groovy@ file:
{code}
grails.plugin.databasemigration.changelogLocation = "migrations"
{code}

h4. New syntax for all scripts

Autobase allowed you to write changelog files that just included the change sets one after the other. This isn't supported by the Database Migration plugin, so _all_ changelogs must put their change set definitions inside a block like so:

{code}
databaseChangeLog = {
   changeSet(...) { ... }
   changeSet(...) { ... }
   ...
}
{code}

In addition, if your main Autobase changelog specifies a logical file path (see next section), you will have to use the syntax:

{code}
databaseChangeLog = {
   logicalFilePath "app-autobase"
   ...
}
{code}

in all the changelog files. If you don't do this, the plugin won't recognise that existing migrations have already been applied to a database and all of them will be reapplied.

These changes also apply to the main changelog, but there are some other differences to cover for that.

h4. Parent changelog differences

The syntax for the main (or parent) Autobase changelog file looks like:

{code}
databaseChangeLog(logicalFilePath: "appName-autobase") {
   include "./migrations/batch/SomeBigChanges.groovy"
   include "./migrations/changelog-1.0.1.groovy"
   include "./migrations/changelog-1.0.5.groovy"
}
{code}

The new format is noticeably different:

{code}
databaseChangeLog = {
   logicalFilePath "site-autobase"

   include file: "batch/SomeBigChanges.groovy"
   include file: "changelog-1.0.1.groovy"
   include file: "changelog-1.0.5.groovy"
}
{code}

In particular, note that:

* The @databaseChangeLog@ line is different
* The logical file path must be defined inside the block
* @include@ takes a named @file@ argument
* The file paths passed to @include@ are relative to the configured migrations directory

Fortunately, these changes are highly localised and pretty trivial to implement.

h4. modifyColumn refactoring no longer available

The @modifyColumn@ refactoring has been removed in the version of Liquibase that comes with the Database Migration plugin. Instead you should use the new @modifyDataType@ refactoring like so:

{code}
...
changeSet(id:'IncreaseCommentBodySize', author:'someone') {
   modifyDataType tableName: 'comment', columnName: 'body', newDataType: 'TEXT'
}
{code}

The parameters are the same as for @modifyColumn@, but the syntax is somewhat different.
